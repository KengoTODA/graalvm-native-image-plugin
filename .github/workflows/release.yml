name: Release Plugin

on:
  workflow_dispatch:
    inputs:
      release-level:
        description: 'Release level available values: major, minor, patch'
        required: true

jobs:
  build:
    name: Release Plugin
    runs-on: ubuntu-18.04
    if: contains(github.event.ref, 'main')

    steps:

      - name: verify inputs
        run: echo "${LEVEL}" | grep -E -q '(major|minor|patch)'
        env:
          LEVEL: ${{ github.event.inputs.release-level }}

      - name: calculate release level
        id: level
        env:
          RELEASE_LEVEL: ${{ github.event.inputs.release-level }}
        run: |
          echo "::set-output name=value::$(echo ${RELEASE_LEVEL})"

      - name: Checkout
        uses: actions/checkout@v2

      - name: current version
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: current-version
        with:
          semver_only: true

      - name: "calculate next version (from: ${{ steps.current-version.outputs.tag }}, up: ${{ steps.level.outputs.value }})"
        id: next-version
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.current-version.outputs.tag }}
          level: ${{ steps.level.outputs.value }}

      - name: push tag
        uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.next-version.outputs.new_version }}
          message: "Release version ${{ steps.next-version.outputs.new_version }}"

      - name: Set up Java
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8.0.265'

      - name: Cache gradle
        id: gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: gradle-

      - name: Show project version
        env:
          PROJECT_VERSION: ${{ steps.next-version.outputs.new_version }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew clean showVersion \
            -Pgradle.publish.key=$GRADLE_PUBLISH_KEY \
            -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET \
            -PpluginVersion=$PROJECT_VERSION

      - name: "Set Plugin version(${{ steps.next-version.outputs.new_version }}) without 'v'"
        id: no-semantic-version
        env:
          PROJECT_VERSION: ${{ steps.next-version.outputs.new_version }}
        run: echo "::set-output name=value::$(echo "${PROJECT_VERSION}" | sed 's/v//g')"

      - name: Release to gradle plugin portal
        env:
          PROJECT_VERSION: ${{ steps.next-version.outputs.new_version }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew clean publishPlugins \
            -Pgradle.publish.key=$GRADLE_PUBLISH_KEY \
            -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET \
            -PpluginVersion=$PROJECT_VERSION

      - name: Release to gradle plugin portal
        env:
          PROJECT_VERSION: ${{ steps.no-semantic-version.outputs.value }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew clean publishPlugins \
            -Pgradle.publish.key=$GRADLE_PUBLISH_KEY \
            -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET \
            -PpluginVersion=$PROJECT_VERSION
