/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.mikeneck.graalvm;

import java.nio.file.Paths;
import java.util.stream.Collectors;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.file.FileCollection;
import org.gradle.api.provider.Provider;
import org.gradle.api.tasks.TaskContainer;
import org.jetbrains.annotations.NotNull;

public class GraalvmNativeImagePlugin implements Plugin<Project> {

    public void apply(@NotNull Project project) {
        NativeImageExtension nativeImageExtension = new NativeImageExtension(project);
        project.getExtensions().add("nativeImage", nativeImageExtension);

        TaskContainer taskContainer = project.getTasks();

        Provider<GraalVmHome> graalVmHome = project
                .provider(() -> System.getProperty("java.home"))
                .map(Paths::get)
                .map(GraalVmHome::new);

        InstallNativeImageTask installNativeImageTask = taskContainer.create(
                "installNativeImage", InstallNativeImageTask.class, graalVmHome);
        installNativeImageTask.setDescription("Installs native-image command by graalVm Updater command");
        installNativeImageTask.setGroup("graalvm");

        NativeImageTask nativeImageTask = taskContainer.create(
                "nativeImage", NativeImageTask.class, project, graalVmHome);
        nativeImageTask.dependsOn("jar");
        nativeImageTask.setDescription("Creates native executable");
        nativeImageTask.setGroup("graalvm");
        nativeImageTask.dependsOn(installNativeImageTask);

        GenerateNativeImageConfigTask nativeImageConfigFiles =
                taskContainer.create(
                        "nativeImageConfigFiles",
                        GenerateNativeImageConfigTask.class,
                        project);
        nativeImageConfigFiles.dependsOn("classes");
        nativeImageConfigFiles.setDescription("Generates native image config json files via test run.");
        nativeImageConfigFiles.setGroup("graalvm");

        MergeNativeImageConfigTask mergeNativeImageConfig = 
                taskContainer.create(
                        "mergeNativeImageConfig",
                        MergeNativeImageConfigTask.class,
                        project);
        mergeNativeImageConfig.destinationDir(project.getBuildDir().toPath().resolve("native-image-config"));
        Provider<FileCollection> configDirs = project.provider(() -> nativeImageConfigFiles
                .getJavaExecutions()
                .stream()
                .map(exec -> exec.outputDirectory)
                .collect(Collectors.toList()))
                .map(project::files);
        mergeNativeImageConfig.fromDirectories(configDirs);
        mergeNativeImageConfig.setGroup("graalvm");
        mergeNativeImageConfig.setDescription("Merge native image config json files into one file.");
        mergeNativeImageConfig.dependsOn(nativeImageConfigFiles);

        taskContainer.create("generateNativeImageConfig", task -> {
            task.setGroup("graalvm");
            task.setDescription("Generates native image config json files.");
            task.dependsOn(nativeImageConfigFiles, mergeNativeImageConfig);
        });
    }
}
