/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.mikeneck.graalvm;

import java.io.*;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.gradle.testkit.runner.BuildTask;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

/**
 * A simple functional test for the 'org.mikeneck.graalvm.greeting' plugin.
 */
public class GraalvmNativeImagePluginFunctionalTest {
    @Test public void canRunTask() throws IOException {
        // Setup the test build
        File projectDir = new File("build/functionalTest");
        Files.createDirectories(projectDir.toPath());
        writeString(new File(projectDir, "settings.gradle"), "");
        copyFile("build-gradle.txt", projectDir.toPath().resolve("build.gradle"));
        Path dir = projectDir.toPath().resolve("src/main/java/com/example");
        Files.createDirectories(dir);
        Path appJava = dir.resolve("App.java");
        copyFile("com_example_App_java.txt", appJava);

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("nativeImage");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        List<String> succeededTasks = result.tasks(TaskOutcome.SUCCESS).stream()
                .map(BuildTask::getPath)
                .collect(Collectors.toList());
        assertThat(succeededTasks, hasItems(":compileJava", ":classes", ":jar", ":nativeImage"));
        assertTrue(Files.exists(projectDir.toPath().resolve("build/native-image/test-app")));
    }

    private void copyFile(String resourceName, Path file) throws IOException {
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        URL url = loader.getResource(resourceName);
        if (url == null) {
            throw new FileNotFoundException(resourceName);
        }
        try (final InputStream inputStream = loader.getResourceAsStream(resourceName)) {
            Files.copy(Objects.requireNonNull(inputStream), file);
        }
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
